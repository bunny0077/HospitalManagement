//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalManagementEntities : DbContext
    {
        public HospitalManagementEntities()
            : base("name=HospitalManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Allergy> Allergies { get; set; }
        public virtual DbSet<PatientAllergy> PatientAllergies { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<View_PatientAllergy> View_PatientAllergy { get; set; }
        public virtual DbSet<View_PatientAllergies> View_PatientAllergies { get; set; }
    
        public virtual ObjectResult<View_PatientAllergies> sp_GetPatientsInfo(Nullable<int> pageno, string filter, Nullable<int> pagesize, string sorting, string sortOrder, string userId)
        {
            var pagenoParameter = pageno.HasValue ?
                new ObjectParameter("pageno", pageno) :
                new ObjectParameter("pageno", typeof(int));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PatientAllergies>("sp_GetPatientsInfo", pagenoParameter, filterParameter, pagesizeParameter, sortingParameter, sortOrderParameter, userIdParameter);
        }
    
        public virtual ObjectResult<View_PatientAllergies> sp_GetPatientsInfo(Nullable<int> pageno, string filter, Nullable<int> pagesize, string sorting, string sortOrder, string userId, MergeOption mergeOption)
        {
            var pagenoParameter = pageno.HasValue ?
                new ObjectParameter("pageno", pageno) :
                new ObjectParameter("pageno", typeof(int));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PatientAllergies>("sp_GetPatientsInfo", mergeOption, pagenoParameter, filterParameter, pagesizeParameter, sortingParameter, sortOrderParameter, userIdParameter);
        }
    }
}
